import type { PassdownNote } from '../types';
export declare const usePassdownStore: import("pinia").StoreDefinition<"passdown", Pick<{
    notes: import("vue").Ref<{
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[], PassdownNote[] | {
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    notesByShift: import("vue").ComputedRef<{
        day: number;
        evening: number;
        night: number;
    }>;
    notesByMachine: import("vue").ComputedRef<Record<string, number>>;
    recentNotes: import("vue").ComputedRef<{
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[]>;
    fetchNotes: () => Promise<void>;
    addNote: (note: Omit<PassdownNote, 'id' | 'createdAt' | 'updatedAt'>) => Promise<PassdownNote | null>;
}, "error" | "notes" | "loading">, Pick<{
    notes: import("vue").Ref<{
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[], PassdownNote[] | {
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    notesByShift: import("vue").ComputedRef<{
        day: number;
        evening: number;
        night: number;
    }>;
    notesByMachine: import("vue").ComputedRef<Record<string, number>>;
    recentNotes: import("vue").ComputedRef<{
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[]>;
    fetchNotes: () => Promise<void>;
    addNote: (note: Omit<PassdownNote, 'id' | 'createdAt' | 'updatedAt'>) => Promise<PassdownNote | null>;
}, "notesByShift" | "notesByMachine" | "recentNotes">, Pick<{
    notes: import("vue").Ref<{
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[], PassdownNote[] | {
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    notesByShift: import("vue").ComputedRef<{
        day: number;
        evening: number;
        night: number;
    }>;
    notesByMachine: import("vue").ComputedRef<Record<string, number>>;
    recentNotes: import("vue").ComputedRef<{
        id: string;
        workOrder: string;
        shift: "day" | "evening" | "night";
        date: string;
        operator: string;
        machine: string;
        laborType: import("../types").LaborType;
        machineCondition: import("../types").MachineCondition;
        hoursWorked: number;
        partsCompleted: number;
        qualityIssues: string;
        machineIssues: string;
        fiveSChecklist: {
            coolantLevel: boolean;
            coolantCondition: "low" | "good" | "needs-change";
            chipBinEmptied: boolean;
            chipBinCondition: "empty" | "half-full" | "full";
            deskCleaned: boolean;
            toolingReturned: boolean;
            toolingCondition: "good" | "worn" | "damaged";
            workAreaOrganized: boolean;
            safetyChecked: boolean;
            notes: string;
        };
        nextShiftNotes: string;
        createdAt: string;
        updatedAt: string;
    }[]>;
    fetchNotes: () => Promise<void>;
    addNote: (note: Omit<PassdownNote, 'id' | 'createdAt' | 'updatedAt'>) => Promise<PassdownNote | null>;
}, "fetchNotes" | "addNote">>;
