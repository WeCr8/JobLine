import type { SubscriptionPlan, Subscription, Organization, SystemLog, Analytics, SystemSettings } from '../types/admin';
import type { User } from '../types';
import type { UserRole } from '../types/index';
export type { Organization, SubscriptionPlan, SystemSettings, SystemLog, Analytics };
export type { User, Subscription, Invoice } from '../types/admin';
export declare const useAdminStore: import("pinia").StoreDefinition<"admin", Pick<{
    subscriptionPlans: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        price: number;
        displayPrice?: number | undefined;
        interval: "monthly" | "yearly";
        stripePriceId: string;
        active: boolean;
        features: string[];
        subscriberCount?: number | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[], SubscriptionPlan[] | {
        id: string;
        name: string;
        description: string;
        price: number;
        displayPrice?: number | undefined;
        interval: "monthly" | "yearly";
        stripePriceId: string;
        active: boolean;
        features: string[];
        subscriberCount?: number | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    activeSubscriptions: import("vue").Ref<{
        id: string;
        userId: string;
        userName: string;
        userEmail: string;
        customerId: string;
        subscriptionId: string;
        planName: string;
        priceId: string;
        status: string;
        startDate: string;
        nextBillingDate: string;
        amount: number;
        interval: string;
        cancelAtPeriodEnd: boolean;
        paymentMethodBrand?: string | undefined;
        paymentMethodLast4?: string | undefined;
        customerSince: string;
        invoices: {
            id: string;
            date: string;
            amount: number;
            status: string;
        }[];
    }[], Subscription[] | {
        id: string;
        userId: string;
        userName: string;
        userEmail: string;
        customerId: string;
        subscriptionId: string;
        planName: string;
        priceId: string;
        status: string;
        startDate: string;
        nextBillingDate: string;
        amount: number;
        interval: string;
        cancelAtPeriodEnd: boolean;
        paymentMethodBrand?: string | undefined;
        paymentMethodLast4?: string | undefined;
        customerSince: string;
        invoices: {
            id: string;
            date: string;
            amount: number;
            status: string;
        }[];
    }[]>;
    users: import("vue").Ref<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[], User[] | {
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    organizations: import("vue").Ref<{
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    }[], Organization[] | {
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    }[]>;
    systemLogs: import("vue").Ref<{
        level: "INFO" | "WARN" | "ERROR" | "DEBUG";
        timestamp: string;
        message: string;
        id?: string | undefined;
        userId?: string | undefined;
        ipAddress?: string | undefined;
    }[], SystemLog[] | {
        level: "INFO" | "WARN" | "ERROR" | "DEBUG";
        timestamp: string;
        message: string;
        id?: string | undefined;
        userId?: string | undefined;
        ipAddress?: string | undefined;
    }[]>;
    analytics: import("vue").Ref<{
        totalRevenue: number;
        revenueGrowth: number;
        activeUsers: number;
        userGrowth: number;
        conversionRate: number;
        conversionGrowth: number;
        churnRate: number;
        churnChange: number;
        monthlyRevenue: number[];
        monthlyUsers: number[];
        planDistribution: Record<string, number>;
    }, Analytics | {
        totalRevenue: number;
        revenueGrowth: number;
        activeUsers: number;
        userGrowth: number;
        conversionRate: number;
        conversionGrowth: number;
        churnRate: number;
        churnChange: number;
        monthlyRevenue: number[];
        monthlyUsers: number[];
        planDistribution: Record<string, number>;
    }>;
    systemSettings: import("vue").Ref<{
        stripeSecretKey: string;
        stripeWebhookSecret: string;
        openaiApiKey: string;
        ai: {
            defaultModel: string;
            temperature: number;
            maxTokens: number;
            timeout: number;
        };
        backup: {
            enabled: boolean;
            frequency: string;
            retentionDays: number;
        };
    }, SystemSettings | {
        stripeSecretKey: string;
        stripeWebhookSecret: string;
        openaiApiKey: string;
        ai: {
            defaultModel: string;
            temperature: number;
            maxTokens: number;
            timeout: number;
        };
        backup: {
            enabled: boolean;
            frequency: string;
            retentionDays: number;
        };
    }>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    totalUsers: import("vue").ComputedRef<number>;
    activeUsers: import("vue").ComputedRef<number>;
    totalRevenue: import("vue").ComputedRef<number>;
    platformAdmins: import("vue").ComputedRef<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    organizationAdmins: import("vue").ComputedRef<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    fetchSubscriptionPlans: () => Promise<void>;
    fetchActiveSubscriptions: () => Promise<void>;
    fetchUsers: () => Promise<void>;
    fetchOrganizations: () => Promise<void>;
    fetchAnalytics: () => Promise<void>;
    fetchSystemSettings: () => Promise<void>;
    fetchSystemLogs: (limit?: number) => Promise<void>;
    saveSubscriptionPlan: (plan: SubscriptionPlan) => Promise<void>;
    updateUser: (user: User) => Promise<void>;
    saveOrganization: (organization: Organization) => Promise<void>;
    cancelSubscription: (subscriptionId: string) => Promise<void>;
    saveSystemSettings: (settings: SystemSettings) => Promise<void>;
    triggerManualBackup: () => Promise<void>;
}, "loading" | "error" | "users" | "organizations" | "subscriptionPlans" | "activeSubscriptions" | "systemLogs" | "analytics" | "systemSettings">, Pick<{
    subscriptionPlans: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        price: number;
        displayPrice?: number | undefined;
        interval: "monthly" | "yearly";
        stripePriceId: string;
        active: boolean;
        features: string[];
        subscriberCount?: number | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[], SubscriptionPlan[] | {
        id: string;
        name: string;
        description: string;
        price: number;
        displayPrice?: number | undefined;
        interval: "monthly" | "yearly";
        stripePriceId: string;
        active: boolean;
        features: string[];
        subscriberCount?: number | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    activeSubscriptions: import("vue").Ref<{
        id: string;
        userId: string;
        userName: string;
        userEmail: string;
        customerId: string;
        subscriptionId: string;
        planName: string;
        priceId: string;
        status: string;
        startDate: string;
        nextBillingDate: string;
        amount: number;
        interval: string;
        cancelAtPeriodEnd: boolean;
        paymentMethodBrand?: string | undefined;
        paymentMethodLast4?: string | undefined;
        customerSince: string;
        invoices: {
            id: string;
            date: string;
            amount: number;
            status: string;
        }[];
    }[], Subscription[] | {
        id: string;
        userId: string;
        userName: string;
        userEmail: string;
        customerId: string;
        subscriptionId: string;
        planName: string;
        priceId: string;
        status: string;
        startDate: string;
        nextBillingDate: string;
        amount: number;
        interval: string;
        cancelAtPeriodEnd: boolean;
        paymentMethodBrand?: string | undefined;
        paymentMethodLast4?: string | undefined;
        customerSince: string;
        invoices: {
            id: string;
            date: string;
            amount: number;
            status: string;
        }[];
    }[]>;
    users: import("vue").Ref<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[], User[] | {
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    organizations: import("vue").Ref<{
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    }[], Organization[] | {
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    }[]>;
    systemLogs: import("vue").Ref<{
        level: "INFO" | "WARN" | "ERROR" | "DEBUG";
        timestamp: string;
        message: string;
        id?: string | undefined;
        userId?: string | undefined;
        ipAddress?: string | undefined;
    }[], SystemLog[] | {
        level: "INFO" | "WARN" | "ERROR" | "DEBUG";
        timestamp: string;
        message: string;
        id?: string | undefined;
        userId?: string | undefined;
        ipAddress?: string | undefined;
    }[]>;
    analytics: import("vue").Ref<{
        totalRevenue: number;
        revenueGrowth: number;
        activeUsers: number;
        userGrowth: number;
        conversionRate: number;
        conversionGrowth: number;
        churnRate: number;
        churnChange: number;
        monthlyRevenue: number[];
        monthlyUsers: number[];
        planDistribution: Record<string, number>;
    }, Analytics | {
        totalRevenue: number;
        revenueGrowth: number;
        activeUsers: number;
        userGrowth: number;
        conversionRate: number;
        conversionGrowth: number;
        churnRate: number;
        churnChange: number;
        monthlyRevenue: number[];
        monthlyUsers: number[];
        planDistribution: Record<string, number>;
    }>;
    systemSettings: import("vue").Ref<{
        stripeSecretKey: string;
        stripeWebhookSecret: string;
        openaiApiKey: string;
        ai: {
            defaultModel: string;
            temperature: number;
            maxTokens: number;
            timeout: number;
        };
        backup: {
            enabled: boolean;
            frequency: string;
            retentionDays: number;
        };
    }, SystemSettings | {
        stripeSecretKey: string;
        stripeWebhookSecret: string;
        openaiApiKey: string;
        ai: {
            defaultModel: string;
            temperature: number;
            maxTokens: number;
            timeout: number;
        };
        backup: {
            enabled: boolean;
            frequency: string;
            retentionDays: number;
        };
    }>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    totalUsers: import("vue").ComputedRef<number>;
    activeUsers: import("vue").ComputedRef<number>;
    totalRevenue: import("vue").ComputedRef<number>;
    platformAdmins: import("vue").ComputedRef<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    organizationAdmins: import("vue").ComputedRef<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    fetchSubscriptionPlans: () => Promise<void>;
    fetchActiveSubscriptions: () => Promise<void>;
    fetchUsers: () => Promise<void>;
    fetchOrganizations: () => Promise<void>;
    fetchAnalytics: () => Promise<void>;
    fetchSystemSettings: () => Promise<void>;
    fetchSystemLogs: (limit?: number) => Promise<void>;
    saveSubscriptionPlan: (plan: SubscriptionPlan) => Promise<void>;
    updateUser: (user: User) => Promise<void>;
    saveOrganization: (organization: Organization) => Promise<void>;
    cancelSubscription: (subscriptionId: string) => Promise<void>;
    saveSystemSettings: (settings: SystemSettings) => Promise<void>;
    triggerManualBackup: () => Promise<void>;
}, "totalRevenue" | "activeUsers" | "totalUsers" | "platformAdmins" | "organizationAdmins">, Pick<{
    subscriptionPlans: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        price: number;
        displayPrice?: number | undefined;
        interval: "monthly" | "yearly";
        stripePriceId: string;
        active: boolean;
        features: string[];
        subscriberCount?: number | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[], SubscriptionPlan[] | {
        id: string;
        name: string;
        description: string;
        price: number;
        displayPrice?: number | undefined;
        interval: "monthly" | "yearly";
        stripePriceId: string;
        active: boolean;
        features: string[];
        subscriberCount?: number | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    activeSubscriptions: import("vue").Ref<{
        id: string;
        userId: string;
        userName: string;
        userEmail: string;
        customerId: string;
        subscriptionId: string;
        planName: string;
        priceId: string;
        status: string;
        startDate: string;
        nextBillingDate: string;
        amount: number;
        interval: string;
        cancelAtPeriodEnd: boolean;
        paymentMethodBrand?: string | undefined;
        paymentMethodLast4?: string | undefined;
        customerSince: string;
        invoices: {
            id: string;
            date: string;
            amount: number;
            status: string;
        }[];
    }[], Subscription[] | {
        id: string;
        userId: string;
        userName: string;
        userEmail: string;
        customerId: string;
        subscriptionId: string;
        planName: string;
        priceId: string;
        status: string;
        startDate: string;
        nextBillingDate: string;
        amount: number;
        interval: string;
        cancelAtPeriodEnd: boolean;
        paymentMethodBrand?: string | undefined;
        paymentMethodLast4?: string | undefined;
        customerSince: string;
        invoices: {
            id: string;
            date: string;
            amount: number;
            status: string;
        }[];
    }[]>;
    users: import("vue").Ref<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[], User[] | {
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    organizations: import("vue").Ref<{
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    }[], Organization[] | {
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    }[]>;
    systemLogs: import("vue").Ref<{
        level: "INFO" | "WARN" | "ERROR" | "DEBUG";
        timestamp: string;
        message: string;
        id?: string | undefined;
        userId?: string | undefined;
        ipAddress?: string | undefined;
    }[], SystemLog[] | {
        level: "INFO" | "WARN" | "ERROR" | "DEBUG";
        timestamp: string;
        message: string;
        id?: string | undefined;
        userId?: string | undefined;
        ipAddress?: string | undefined;
    }[]>;
    analytics: import("vue").Ref<{
        totalRevenue: number;
        revenueGrowth: number;
        activeUsers: number;
        userGrowth: number;
        conversionRate: number;
        conversionGrowth: number;
        churnRate: number;
        churnChange: number;
        monthlyRevenue: number[];
        monthlyUsers: number[];
        planDistribution: Record<string, number>;
    }, Analytics | {
        totalRevenue: number;
        revenueGrowth: number;
        activeUsers: number;
        userGrowth: number;
        conversionRate: number;
        conversionGrowth: number;
        churnRate: number;
        churnChange: number;
        monthlyRevenue: number[];
        monthlyUsers: number[];
        planDistribution: Record<string, number>;
    }>;
    systemSettings: import("vue").Ref<{
        stripeSecretKey: string;
        stripeWebhookSecret: string;
        openaiApiKey: string;
        ai: {
            defaultModel: string;
            temperature: number;
            maxTokens: number;
            timeout: number;
        };
        backup: {
            enabled: boolean;
            frequency: string;
            retentionDays: number;
        };
    }, SystemSettings | {
        stripeSecretKey: string;
        stripeWebhookSecret: string;
        openaiApiKey: string;
        ai: {
            defaultModel: string;
            temperature: number;
            maxTokens: number;
            timeout: number;
        };
        backup: {
            enabled: boolean;
            frequency: string;
            retentionDays: number;
        };
    }>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    totalUsers: import("vue").ComputedRef<number>;
    activeUsers: import("vue").ComputedRef<number>;
    totalRevenue: import("vue").ComputedRef<number>;
    platformAdmins: import("vue").ComputedRef<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    organizationAdmins: import("vue").ComputedRef<{
        id: string;
        email: string;
        name: string;
        role: UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    fetchSubscriptionPlans: () => Promise<void>;
    fetchActiveSubscriptions: () => Promise<void>;
    fetchUsers: () => Promise<void>;
    fetchOrganizations: () => Promise<void>;
    fetchAnalytics: () => Promise<void>;
    fetchSystemSettings: () => Promise<void>;
    fetchSystemLogs: (limit?: number) => Promise<void>;
    saveSubscriptionPlan: (plan: SubscriptionPlan) => Promise<void>;
    updateUser: (user: User) => Promise<void>;
    saveOrganization: (organization: Organization) => Promise<void>;
    cancelSubscription: (subscriptionId: string) => Promise<void>;
    saveSystemSettings: (settings: SystemSettings) => Promise<void>;
    triggerManualBackup: () => Promise<void>;
}, "cancelSubscription" | "fetchSubscriptionPlans" | "fetchActiveSubscriptions" | "fetchUsers" | "fetchOrganizations" | "fetchAnalytics" | "fetchSystemSettings" | "fetchSystemLogs" | "saveSubscriptionPlan" | "updateUser" | "saveOrganization" | "saveSystemSettings" | "triggerManualBackup">>;
