import type { Organization, Invite, User } from '../types';
export declare const useOrganizationStore: import("pinia").StoreDefinition<"organization", Pick<{
    organization: import("vue").Ref<{
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        primaryContactPhone?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        settings?: Record<string, any> | undefined;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    } | null, Organization | {
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        primaryContactPhone?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        settings?: Record<string, any> | undefined;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    } | null>;
    users: import("vue").Ref<{
        id: string;
        email: string;
        name: string;
        role: import("../types").UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[], User[] | {
        id: string;
        email: string;
        name: string;
        role: import("../types").UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    invites: import("vue").Ref<{
        id: string;
        organizationId: string;
        email: string;
        role: string;
        department?: string | undefined;
        status: "pending" | "accepted" | "expired";
        createdBy: string;
        createdAt: string;
        expiresAt: string;
    }[], Invite[] | {
        id: string;
        organizationId: string;
        email: string;
        role: string;
        department?: string | undefined;
        status: "pending" | "accepted" | "expired";
        createdBy: string;
        createdAt: string;
        expiresAt: string;
    }[]>;
    departments: import("vue").Ref<any[], any[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    organizationName: import("vue").ComputedRef<string>;
    userCount: import("vue").ComputedRef<number>;
    activeUserCount: import("vue").ComputedRef<number>;
    pendingInviteCount: import("vue").ComputedRef<number>;
    fetchOrganization: () => Promise<void>;
    fetchUsers: () => Promise<void>;
    fetchInvites: () => Promise<void>;
    fetchDepartments: () => Promise<void>;
    updateOrganization: (updates: Partial<Organization>) => Promise<boolean>;
    inviteUser: (email: string, role: string, department?: string) => Promise<Invite | null>;
    cancelInvite: (inviteId: string) => Promise<boolean>;
    updateUser: (userId: string, updates: Partial<User>) => Promise<boolean>;
    addDepartment: (department: any) => Promise<any>;
}, "error" | "users" | "departments" | "invites" | "loading" | "organization">, Pick<{
    organization: import("vue").Ref<{
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        primaryContactPhone?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        settings?: Record<string, any> | undefined;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    } | null, Organization | {
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        primaryContactPhone?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        settings?: Record<string, any> | undefined;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    } | null>;
    users: import("vue").Ref<{
        id: string;
        email: string;
        name: string;
        role: import("../types").UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[], User[] | {
        id: string;
        email: string;
        name: string;
        role: import("../types").UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    invites: import("vue").Ref<{
        id: string;
        organizationId: string;
        email: string;
        role: string;
        department?: string | undefined;
        status: "pending" | "accepted" | "expired";
        createdBy: string;
        createdAt: string;
        expiresAt: string;
    }[], Invite[] | {
        id: string;
        organizationId: string;
        email: string;
        role: string;
        department?: string | undefined;
        status: "pending" | "accepted" | "expired";
        createdBy: string;
        createdAt: string;
        expiresAt: string;
    }[]>;
    departments: import("vue").Ref<any[], any[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    organizationName: import("vue").ComputedRef<string>;
    userCount: import("vue").ComputedRef<number>;
    activeUserCount: import("vue").ComputedRef<number>;
    pendingInviteCount: import("vue").ComputedRef<number>;
    fetchOrganization: () => Promise<void>;
    fetchUsers: () => Promise<void>;
    fetchInvites: () => Promise<void>;
    fetchDepartments: () => Promise<void>;
    updateOrganization: (updates: Partial<Organization>) => Promise<boolean>;
    inviteUser: (email: string, role: string, department?: string) => Promise<Invite | null>;
    cancelInvite: (inviteId: string) => Promise<boolean>;
    updateUser: (userId: string, updates: Partial<User>) => Promise<boolean>;
    addDepartment: (department: any) => Promise<any>;
}, "organizationName" | "userCount" | "activeUserCount" | "pendingInviteCount">, Pick<{
    organization: import("vue").Ref<{
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        primaryContactPhone?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        settings?: Record<string, any> | undefined;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    } | null, Organization | {
        id: string;
        name: string;
        industry?: string | undefined;
        address?: string | undefined;
        phone?: string | undefined;
        website?: string | undefined;
        logoUrl?: string | undefined;
        primaryContactName?: string | undefined;
        primaryContactEmail?: string | undefined;
        primaryContactPhone?: string | undefined;
        subscriptionId?: string | undefined;
        subscriptionStatus?: string | undefined;
        planId?: string | undefined;
        planName?: string | undefined;
        maxUsers: number;
        currentUserCount: number;
        settings?: Record<string, any> | undefined;
        isActive: boolean;
        createdAt: string;
        updatedAt?: string | undefined;
    } | null>;
    users: import("vue").Ref<{
        id: string;
        email: string;
        name: string;
        role: import("../types").UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[], User[] | {
        id: string;
        email: string;
        name: string;
        role: import("../types").UserRole;
        department?: string | undefined;
        organization_id?: string | undefined;
        is_active: boolean;
        last_login?: string | undefined;
        created_at: string;
        is_developer?: boolean | undefined;
    }[]>;
    invites: import("vue").Ref<{
        id: string;
        organizationId: string;
        email: string;
        role: string;
        department?: string | undefined;
        status: "pending" | "accepted" | "expired";
        createdBy: string;
        createdAt: string;
        expiresAt: string;
    }[], Invite[] | {
        id: string;
        organizationId: string;
        email: string;
        role: string;
        department?: string | undefined;
        status: "pending" | "accepted" | "expired";
        createdBy: string;
        createdAt: string;
        expiresAt: string;
    }[]>;
    departments: import("vue").Ref<any[], any[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    organizationName: import("vue").ComputedRef<string>;
    userCount: import("vue").ComputedRef<number>;
    activeUserCount: import("vue").ComputedRef<number>;
    pendingInviteCount: import("vue").ComputedRef<number>;
    fetchOrganization: () => Promise<void>;
    fetchUsers: () => Promise<void>;
    fetchInvites: () => Promise<void>;
    fetchDepartments: () => Promise<void>;
    updateOrganization: (updates: Partial<Organization>) => Promise<boolean>;
    inviteUser: (email: string, role: string, department?: string) => Promise<Invite | null>;
    cancelInvite: (inviteId: string) => Promise<boolean>;
    updateUser: (userId: string, updates: Partial<User>) => Promise<boolean>;
    addDepartment: (department: any) => Promise<any>;
}, "fetchDepartments" | "fetchUsers" | "updateUser" | "fetchOrganization" | "fetchInvites" | "updateOrganization" | "inviteUser" | "cancelInvite" | "addDepartment">>;
