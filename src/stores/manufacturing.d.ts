import type { ManufacturingDepartment, Machine, WorkCenter, Process, Capability, DigitalTwinCompliance, ToolDataIntegrity, MaterialInventory, PurchaseOrder, ShippingReceiving, ProgrammingTask } from '../types/manufacturing';
export declare const useManufacturingStore: import("pinia").StoreDefinition<"manufacturing", Pick<{
    departments: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        supervisor: string;
        shift: "day" | "evening" | "night" | "all-shifts";
        capabilities: string[];
        qualityStandards: string[];
        machines: string[];
        operators: string[];
        activeJobs: number;
        efficiency: number;
        utilizationRate: number;
        kpis: {
            name: string;
            value: number;
            target: number;
            unit: string;
            trend: "down" | "up" | "stable";
        }[];
        integrations: string[];
    }[], ManufacturingDepartment[] | {
        id: string;
        name: string;
        description: string;
        supervisor: string;
        shift: "day" | "evening" | "night" | "all-shifts";
        capabilities: string[];
        qualityStandards: string[];
        machines: string[];
        operators: string[];
        activeJobs: number;
        efficiency: number;
        utilizationRate: number;
        kpis: {
            name: string;
            value: number;
            target: number;
            unit: string;
            trend: "down" | "up" | "stable";
        }[];
        integrations: string[];
    }[]>;
    machines: import("vue").Ref<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[], Machine[] | {
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    workCenters: import("vue").Ref<{
        id: string;
        name: string;
        department: string;
        machines: string[];
        capabilities: string[];
        capacity: number;
        currentLoad: number;
        efficiency: number;
        setupTime: number;
        cycleTime: number;
        location: string;
        supervisor: string;
    }[], WorkCenter[] | {
        id: string;
        name: string;
        department: string;
        machines: string[];
        capabilities: string[];
        capacity: number;
        currentLoad: number;
        efficiency: number;
        setupTime: number;
        cycleTime: number;
        location: string;
        supervisor: string;
    }[]>;
    processes: import("vue").Ref<{
        id: string;
        name: string;
        department: string;
        description: string;
        steps: {
            id: string;
            stepNumber: number;
            name: string;
            description: string;
            duration: number;
            resources: string[];
            qualityChecks: string[];
            safetyNotes: string[];
        }[];
        standardTime: number;
        qualityChecks: string[];
        tooling: string[];
        materials: string[];
        skillRequirements: string[];
        safetyRequirements: string[];
    }[], Process[] | {
        id: string;
        name: string;
        department: string;
        description: string;
        steps: {
            id: string;
            stepNumber: number;
            name: string;
            description: string;
            duration: number;
            resources: string[];
            qualityChecks: string[];
            safetyNotes: string[];
        }[];
        standardTime: number;
        qualityChecks: string[];
        tooling: string[];
        materials: string[];
        skillRequirements: string[];
        safetyRequirements: string[];
    }[]>;
    capabilities: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        departments: string[];
        tolerance: string;
        materials: string[];
        maxSize?: string | undefined;
        minFeature?: string | undefined;
        surfaceFinish?: string | undefined;
        processes?: string[] | undefined;
        certifications?: string[] | undefined;
        qualityStandards?: string[] | undefined;
        equipment?: string[] | undefined;
        services?: string[] | undefined;
        layerHeight?: string | undefined;
        postProcessing?: string[] | undefined;
        leadTime?: string | undefined;
        capacity?: string | undefined;
    }[], Capability[] | {
        id: string;
        name: string;
        description: string;
        departments: string[];
        tolerance: string;
        materials: string[];
        maxSize?: string | undefined;
        minFeature?: string | undefined;
        surfaceFinish?: string | undefined;
        processes?: string[] | undefined;
        certifications?: string[] | undefined;
        qualityStandards?: string[] | undefined;
        equipment?: string[] | undefined;
        services?: string[] | undefined;
        layerHeight?: string | undefined;
        postProcessing?: string[] | undefined;
        leadTime?: string | undefined;
        capacity?: string | undefined;
    }[]>;
    digitalTwinCompliance: import("vue").Ref<{
        id: string;
        partNumber: string;
        digitalTwinVersion: string;
        physicalPartVersion: string;
        complianceStatus: "compliant" | "non-compliant" | "under-review";
        lastValidation: string;
        deviations: {
            id: string;
            type: "material" | "dimensional" | "process" | "documentation";
            description: string;
            severity: "critical" | "minor" | "major";
            status: "open" | "approved" | "rejected";
            justification?: string | undefined;
        }[];
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[], DigitalTwinCompliance[] | {
        id: string;
        partNumber: string;
        digitalTwinVersion: string;
        physicalPartVersion: string;
        complianceStatus: "compliant" | "non-compliant" | "under-review";
        lastValidation: string;
        deviations: {
            id: string;
            type: "material" | "dimensional" | "process" | "documentation";
            description: string;
            severity: "critical" | "minor" | "major";
            status: "open" | "approved" | "rejected";
            justification?: string | undefined;
        }[];
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[]>;
    toolDataIntegrity: import("vue").Ref<{
        id: string;
        toolId: string;
        toolNumber: string;
        description: string;
        digitalData: {
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            geometry: string;
            speeds: number[];
            feeds: number[];
            applications: string[];
        };
        physicalVerification: {
            measuredDiameter: number;
            measuredLength: number;
            condition: "good" | "worn" | "damaged" | "new";
            wearMeasurements: {
                location: string;
                measurement: number;
                tolerance: number;
                status: "within-spec" | "approaching-limit" | "out-of-spec";
            }[];
            lastInspection: string;
            inspector: string;
        };
        complianceStatus: "pending" | "verified" | "discrepancy";
        lastVerification: string;
        verifiedBy: string;
        discrepancies: string[];
    }[], ToolDataIntegrity[] | {
        id: string;
        toolId: string;
        toolNumber: string;
        description: string;
        digitalData: {
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            geometry: string;
            speeds: number[];
            feeds: number[];
            applications: string[];
        };
        physicalVerification: {
            measuredDiameter: number;
            measuredLength: number;
            condition: "good" | "worn" | "damaged" | "new";
            wearMeasurements: {
                location: string;
                measurement: number;
                tolerance: number;
                status: "within-spec" | "approaching-limit" | "out-of-spec";
            }[];
            lastInspection: string;
            inspector: string;
        };
        complianceStatus: "pending" | "verified" | "discrepancy";
        lastVerification: string;
        verifiedBy: string;
        discrepancies: string[];
    }[]>;
    materialInventory: import("vue").Ref<{
        id: string;
        materialCode: string;
        description: string;
        specification: string;
        currentStock: number;
        unit: string;
        location: string;
        bin: string;
        reorderPoint: number;
        maxStock: number;
        cost: number;
        supplier: string;
        lastReceived: string;
        expirationDate?: string | undefined;
        certifications: string[];
        heatNumber?: string | undefined;
        lotNumber?: string | undefined;
    }[], MaterialInventory[] | {
        id: string;
        materialCode: string;
        description: string;
        specification: string;
        currentStock: number;
        unit: string;
        location: string;
        bin: string;
        reorderPoint: number;
        maxStock: number;
        cost: number;
        supplier: string;
        lastReceived: string;
        expirationDate?: string | undefined;
        certifications: string[];
        heatNumber?: string | undefined;
        lotNumber?: string | undefined;
    }[]>;
    purchaseOrders: import("vue").Ref<{
        id: string;
        poNumber: string;
        supplier: string;
        status: "draft" | "sent" | "acknowledged" | "partial" | "complete" | "cancelled";
        orderDate: string;
        requestedDate: string;
        promisedDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            unitPrice: number;
            totalPrice: number;
            requestedDate: string;
            promisedDate?: string | undefined;
            receivedQuantity: number;
            status: "pending" | "partial" | "complete" | "cancelled";
        }[];
        totalValue: number;
        buyer: string;
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[], PurchaseOrder[] | {
        id: string;
        poNumber: string;
        supplier: string;
        status: "draft" | "sent" | "acknowledged" | "partial" | "complete" | "cancelled";
        orderDate: string;
        requestedDate: string;
        promisedDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            unitPrice: number;
            totalPrice: number;
            requestedDate: string;
            promisedDate?: string | undefined;
            receivedQuantity: number;
            status: "pending" | "partial" | "complete" | "cancelled";
        }[];
        totalValue: number;
        buyer: string;
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[]>;
    shippingReceiving: import("vue").Ref<{
        id: string;
        type: "shipping" | "receiving";
        documentNumber: string;
        supplier?: string | undefined;
        customer?: string | undefined;
        status: "complete" | "scheduled" | "in-progress" | "exception";
        scheduledDate: string;
        actualDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            condition: "good" | "damaged" | "discrepancy";
            location?: string | undefined;
            serialNumbers?: string[] | undefined;
            notes?: string | undefined;
        }[];
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        dock: string;
        handler: string;
        notes?: string | undefined;
    }[], ShippingReceiving[] | {
        id: string;
        type: "shipping" | "receiving";
        documentNumber: string;
        supplier?: string | undefined;
        customer?: string | undefined;
        status: "complete" | "scheduled" | "in-progress" | "exception";
        scheduledDate: string;
        actualDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            condition: "good" | "damaged" | "discrepancy";
            location?: string | undefined;
            serialNumbers?: string[] | undefined;
            notes?: string | undefined;
        }[];
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        dock: string;
        handler: string;
        notes?: string | undefined;
    }[]>;
    programmingTasks: import("vue").Ref<{
        id: string;
        jobId: string;
        partNumber: string;
        operation: string;
        machine: string;
        programmer: string;
        status: "approved" | "in-progress" | "assigned" | "review" | "released";
        priority: "low" | "medium" | "high" | "urgent";
        estimatedHours: number;
        actualHours: number;
        dueDate: string;
        programs: {
            id: string;
            fileName: string;
            version: string;
            filePath: string;
            fileSize: number;
            lastModified: string;
            modifiedBy: string;
            status: "archived" | "approved" | "draft" | "review" | "released";
            checksum: string;
        }[];
        toolList: {
            toolNumber: number;
            description: string;
            type: string;
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            vendor: string;
            partNumber: string;
            quantity: number;
            critical: boolean;
            alternatives?: string[] | undefined;
        }[];
        fixtures: {
            id: string;
            name: string;
            type: "custom" | "hydraulic" | "vise" | "modular" | "pneumatic";
            description: string;
            location: string;
            available: boolean;
            setupTime: number;
            notes?: string | undefined;
        }[];
        notes?: string | undefined;
    }[], ProgrammingTask[] | {
        id: string;
        jobId: string;
        partNumber: string;
        operation: string;
        machine: string;
        programmer: string;
        status: "approved" | "in-progress" | "assigned" | "review" | "released";
        priority: "low" | "medium" | "high" | "urgent";
        estimatedHours: number;
        actualHours: number;
        dueDate: string;
        programs: {
            id: string;
            fileName: string;
            version: string;
            filePath: string;
            fileSize: number;
            lastModified: string;
            modifiedBy: string;
            status: "archived" | "approved" | "draft" | "review" | "released";
            checksum: string;
        }[];
        toolList: {
            toolNumber: number;
            description: string;
            type: string;
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            vendor: string;
            partNumber: string;
            quantity: number;
            critical: boolean;
            alternatives?: string[] | undefined;
        }[];
        fixtures: {
            id: string;
            name: string;
            type: "custom" | "hydraulic" | "vise" | "modular" | "pneumatic";
            description: string;
            location: string;
            available: boolean;
            setupTime: number;
            notes?: string | undefined;
        }[];
        notes?: string | undefined;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    departmentsByType: import("vue").ComputedRef<{
        production: {
            id: string;
            name: string;
            description: string;
            supervisor: string;
            shift: "day" | "evening" | "night" | "all-shifts";
            capabilities: string[];
            qualityStandards: string[];
            machines: string[];
            operators: string[];
            activeJobs: number;
            efficiency: number;
            utilizationRate: number;
            kpis: {
                name: string;
                value: number;
                target: number;
                unit: string;
                trend: "down" | "up" | "stable";
            }[];
            integrations: string[];
        }[];
        support: {
            id: string;
            name: string;
            description: string;
            supervisor: string;
            shift: "day" | "evening" | "night" | "all-shifts";
            capabilities: string[];
            qualityStandards: string[];
            machines: string[];
            operators: string[];
            activeJobs: number;
            efficiency: number;
            utilizationRate: number;
            kpis: {
                name: string;
                value: number;
                target: number;
                unit: string;
                trend: "down" | "up" | "stable";
            }[];
            integrations: string[];
        }[];
    }>;
    machinesByDepartment: import("vue").ComputedRef<Record<string, Machine[]>>;
    activeMachines: import("vue").ComputedRef<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    availableMachines: import("vue").ComputedRef<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    overallEfficiency: import("vue").ComputedRef<number>;
    overallUtilization: import("vue").ComputedRef<number>;
    fetchDepartments: () => Promise<void>;
    fetchMachines: () => Promise<void>;
    fetchWorkCenters: () => Promise<void>;
    fetchProcesses: () => Promise<void>;
    fetchCapabilities: () => Promise<void>;
}, "machines" | "departments" | "loading" | "capabilities" | "processes" | "workCenters" | "digitalTwinCompliance" | "toolDataIntegrity" | "materialInventory" | "purchaseOrders" | "shippingReceiving" | "programmingTasks">, Pick<{
    departments: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        supervisor: string;
        shift: "day" | "evening" | "night" | "all-shifts";
        capabilities: string[];
        qualityStandards: string[];
        machines: string[];
        operators: string[];
        activeJobs: number;
        efficiency: number;
        utilizationRate: number;
        kpis: {
            name: string;
            value: number;
            target: number;
            unit: string;
            trend: "down" | "up" | "stable";
        }[];
        integrations: string[];
    }[], ManufacturingDepartment[] | {
        id: string;
        name: string;
        description: string;
        supervisor: string;
        shift: "day" | "evening" | "night" | "all-shifts";
        capabilities: string[];
        qualityStandards: string[];
        machines: string[];
        operators: string[];
        activeJobs: number;
        efficiency: number;
        utilizationRate: number;
        kpis: {
            name: string;
            value: number;
            target: number;
            unit: string;
            trend: "down" | "up" | "stable";
        }[];
        integrations: string[];
    }[]>;
    machines: import("vue").Ref<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[], Machine[] | {
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    workCenters: import("vue").Ref<{
        id: string;
        name: string;
        department: string;
        machines: string[];
        capabilities: string[];
        capacity: number;
        currentLoad: number;
        efficiency: number;
        setupTime: number;
        cycleTime: number;
        location: string;
        supervisor: string;
    }[], WorkCenter[] | {
        id: string;
        name: string;
        department: string;
        machines: string[];
        capabilities: string[];
        capacity: number;
        currentLoad: number;
        efficiency: number;
        setupTime: number;
        cycleTime: number;
        location: string;
        supervisor: string;
    }[]>;
    processes: import("vue").Ref<{
        id: string;
        name: string;
        department: string;
        description: string;
        steps: {
            id: string;
            stepNumber: number;
            name: string;
            description: string;
            duration: number;
            resources: string[];
            qualityChecks: string[];
            safetyNotes: string[];
        }[];
        standardTime: number;
        qualityChecks: string[];
        tooling: string[];
        materials: string[];
        skillRequirements: string[];
        safetyRequirements: string[];
    }[], Process[] | {
        id: string;
        name: string;
        department: string;
        description: string;
        steps: {
            id: string;
            stepNumber: number;
            name: string;
            description: string;
            duration: number;
            resources: string[];
            qualityChecks: string[];
            safetyNotes: string[];
        }[];
        standardTime: number;
        qualityChecks: string[];
        tooling: string[];
        materials: string[];
        skillRequirements: string[];
        safetyRequirements: string[];
    }[]>;
    capabilities: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        departments: string[];
        tolerance: string;
        materials: string[];
        maxSize?: string | undefined;
        minFeature?: string | undefined;
        surfaceFinish?: string | undefined;
        processes?: string[] | undefined;
        certifications?: string[] | undefined;
        qualityStandards?: string[] | undefined;
        equipment?: string[] | undefined;
        services?: string[] | undefined;
        layerHeight?: string | undefined;
        postProcessing?: string[] | undefined;
        leadTime?: string | undefined;
        capacity?: string | undefined;
    }[], Capability[] | {
        id: string;
        name: string;
        description: string;
        departments: string[];
        tolerance: string;
        materials: string[];
        maxSize?: string | undefined;
        minFeature?: string | undefined;
        surfaceFinish?: string | undefined;
        processes?: string[] | undefined;
        certifications?: string[] | undefined;
        qualityStandards?: string[] | undefined;
        equipment?: string[] | undefined;
        services?: string[] | undefined;
        layerHeight?: string | undefined;
        postProcessing?: string[] | undefined;
        leadTime?: string | undefined;
        capacity?: string | undefined;
    }[]>;
    digitalTwinCompliance: import("vue").Ref<{
        id: string;
        partNumber: string;
        digitalTwinVersion: string;
        physicalPartVersion: string;
        complianceStatus: "compliant" | "non-compliant" | "under-review";
        lastValidation: string;
        deviations: {
            id: string;
            type: "material" | "dimensional" | "process" | "documentation";
            description: string;
            severity: "critical" | "minor" | "major";
            status: "open" | "approved" | "rejected";
            justification?: string | undefined;
        }[];
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[], DigitalTwinCompliance[] | {
        id: string;
        partNumber: string;
        digitalTwinVersion: string;
        physicalPartVersion: string;
        complianceStatus: "compliant" | "non-compliant" | "under-review";
        lastValidation: string;
        deviations: {
            id: string;
            type: "material" | "dimensional" | "process" | "documentation";
            description: string;
            severity: "critical" | "minor" | "major";
            status: "open" | "approved" | "rejected";
            justification?: string | undefined;
        }[];
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[]>;
    toolDataIntegrity: import("vue").Ref<{
        id: string;
        toolId: string;
        toolNumber: string;
        description: string;
        digitalData: {
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            geometry: string;
            speeds: number[];
            feeds: number[];
            applications: string[];
        };
        physicalVerification: {
            measuredDiameter: number;
            measuredLength: number;
            condition: "good" | "worn" | "damaged" | "new";
            wearMeasurements: {
                location: string;
                measurement: number;
                tolerance: number;
                status: "within-spec" | "approaching-limit" | "out-of-spec";
            }[];
            lastInspection: string;
            inspector: string;
        };
        complianceStatus: "pending" | "verified" | "discrepancy";
        lastVerification: string;
        verifiedBy: string;
        discrepancies: string[];
    }[], ToolDataIntegrity[] | {
        id: string;
        toolId: string;
        toolNumber: string;
        description: string;
        digitalData: {
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            geometry: string;
            speeds: number[];
            feeds: number[];
            applications: string[];
        };
        physicalVerification: {
            measuredDiameter: number;
            measuredLength: number;
            condition: "good" | "worn" | "damaged" | "new";
            wearMeasurements: {
                location: string;
                measurement: number;
                tolerance: number;
                status: "within-spec" | "approaching-limit" | "out-of-spec";
            }[];
            lastInspection: string;
            inspector: string;
        };
        complianceStatus: "pending" | "verified" | "discrepancy";
        lastVerification: string;
        verifiedBy: string;
        discrepancies: string[];
    }[]>;
    materialInventory: import("vue").Ref<{
        id: string;
        materialCode: string;
        description: string;
        specification: string;
        currentStock: number;
        unit: string;
        location: string;
        bin: string;
        reorderPoint: number;
        maxStock: number;
        cost: number;
        supplier: string;
        lastReceived: string;
        expirationDate?: string | undefined;
        certifications: string[];
        heatNumber?: string | undefined;
        lotNumber?: string | undefined;
    }[], MaterialInventory[] | {
        id: string;
        materialCode: string;
        description: string;
        specification: string;
        currentStock: number;
        unit: string;
        location: string;
        bin: string;
        reorderPoint: number;
        maxStock: number;
        cost: number;
        supplier: string;
        lastReceived: string;
        expirationDate?: string | undefined;
        certifications: string[];
        heatNumber?: string | undefined;
        lotNumber?: string | undefined;
    }[]>;
    purchaseOrders: import("vue").Ref<{
        id: string;
        poNumber: string;
        supplier: string;
        status: "draft" | "sent" | "acknowledged" | "partial" | "complete" | "cancelled";
        orderDate: string;
        requestedDate: string;
        promisedDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            unitPrice: number;
            totalPrice: number;
            requestedDate: string;
            promisedDate?: string | undefined;
            receivedQuantity: number;
            status: "pending" | "partial" | "complete" | "cancelled";
        }[];
        totalValue: number;
        buyer: string;
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[], PurchaseOrder[] | {
        id: string;
        poNumber: string;
        supplier: string;
        status: "draft" | "sent" | "acknowledged" | "partial" | "complete" | "cancelled";
        orderDate: string;
        requestedDate: string;
        promisedDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            unitPrice: number;
            totalPrice: number;
            requestedDate: string;
            promisedDate?: string | undefined;
            receivedQuantity: number;
            status: "pending" | "partial" | "complete" | "cancelled";
        }[];
        totalValue: number;
        buyer: string;
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[]>;
    shippingReceiving: import("vue").Ref<{
        id: string;
        type: "shipping" | "receiving";
        documentNumber: string;
        supplier?: string | undefined;
        customer?: string | undefined;
        status: "complete" | "scheduled" | "in-progress" | "exception";
        scheduledDate: string;
        actualDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            condition: "good" | "damaged" | "discrepancy";
            location?: string | undefined;
            serialNumbers?: string[] | undefined;
            notes?: string | undefined;
        }[];
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        dock: string;
        handler: string;
        notes?: string | undefined;
    }[], ShippingReceiving[] | {
        id: string;
        type: "shipping" | "receiving";
        documentNumber: string;
        supplier?: string | undefined;
        customer?: string | undefined;
        status: "complete" | "scheduled" | "in-progress" | "exception";
        scheduledDate: string;
        actualDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            condition: "good" | "damaged" | "discrepancy";
            location?: string | undefined;
            serialNumbers?: string[] | undefined;
            notes?: string | undefined;
        }[];
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        dock: string;
        handler: string;
        notes?: string | undefined;
    }[]>;
    programmingTasks: import("vue").Ref<{
        id: string;
        jobId: string;
        partNumber: string;
        operation: string;
        machine: string;
        programmer: string;
        status: "approved" | "in-progress" | "assigned" | "review" | "released";
        priority: "low" | "medium" | "high" | "urgent";
        estimatedHours: number;
        actualHours: number;
        dueDate: string;
        programs: {
            id: string;
            fileName: string;
            version: string;
            filePath: string;
            fileSize: number;
            lastModified: string;
            modifiedBy: string;
            status: "archived" | "approved" | "draft" | "review" | "released";
            checksum: string;
        }[];
        toolList: {
            toolNumber: number;
            description: string;
            type: string;
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            vendor: string;
            partNumber: string;
            quantity: number;
            critical: boolean;
            alternatives?: string[] | undefined;
        }[];
        fixtures: {
            id: string;
            name: string;
            type: "custom" | "hydraulic" | "vise" | "modular" | "pneumatic";
            description: string;
            location: string;
            available: boolean;
            setupTime: number;
            notes?: string | undefined;
        }[];
        notes?: string | undefined;
    }[], ProgrammingTask[] | {
        id: string;
        jobId: string;
        partNumber: string;
        operation: string;
        machine: string;
        programmer: string;
        status: "approved" | "in-progress" | "assigned" | "review" | "released";
        priority: "low" | "medium" | "high" | "urgent";
        estimatedHours: number;
        actualHours: number;
        dueDate: string;
        programs: {
            id: string;
            fileName: string;
            version: string;
            filePath: string;
            fileSize: number;
            lastModified: string;
            modifiedBy: string;
            status: "archived" | "approved" | "draft" | "review" | "released";
            checksum: string;
        }[];
        toolList: {
            toolNumber: number;
            description: string;
            type: string;
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            vendor: string;
            partNumber: string;
            quantity: number;
            critical: boolean;
            alternatives?: string[] | undefined;
        }[];
        fixtures: {
            id: string;
            name: string;
            type: "custom" | "hydraulic" | "vise" | "modular" | "pneumatic";
            description: string;
            location: string;
            available: boolean;
            setupTime: number;
            notes?: string | undefined;
        }[];
        notes?: string | undefined;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    departmentsByType: import("vue").ComputedRef<{
        production: {
            id: string;
            name: string;
            description: string;
            supervisor: string;
            shift: "day" | "evening" | "night" | "all-shifts";
            capabilities: string[];
            qualityStandards: string[];
            machines: string[];
            operators: string[];
            activeJobs: number;
            efficiency: number;
            utilizationRate: number;
            kpis: {
                name: string;
                value: number;
                target: number;
                unit: string;
                trend: "down" | "up" | "stable";
            }[];
            integrations: string[];
        }[];
        support: {
            id: string;
            name: string;
            description: string;
            supervisor: string;
            shift: "day" | "evening" | "night" | "all-shifts";
            capabilities: string[];
            qualityStandards: string[];
            machines: string[];
            operators: string[];
            activeJobs: number;
            efficiency: number;
            utilizationRate: number;
            kpis: {
                name: string;
                value: number;
                target: number;
                unit: string;
                trend: "down" | "up" | "stable";
            }[];
            integrations: string[];
        }[];
    }>;
    machinesByDepartment: import("vue").ComputedRef<Record<string, Machine[]>>;
    activeMachines: import("vue").ComputedRef<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    availableMachines: import("vue").ComputedRef<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    overallEfficiency: import("vue").ComputedRef<number>;
    overallUtilization: import("vue").ComputedRef<number>;
    fetchDepartments: () => Promise<void>;
    fetchMachines: () => Promise<void>;
    fetchWorkCenters: () => Promise<void>;
    fetchProcesses: () => Promise<void>;
    fetchCapabilities: () => Promise<void>;
}, "departmentsByType" | "machinesByDepartment" | "activeMachines" | "availableMachines" | "overallEfficiency" | "overallUtilization">, Pick<{
    departments: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        supervisor: string;
        shift: "day" | "evening" | "night" | "all-shifts";
        capabilities: string[];
        qualityStandards: string[];
        machines: string[];
        operators: string[];
        activeJobs: number;
        efficiency: number;
        utilizationRate: number;
        kpis: {
            name: string;
            value: number;
            target: number;
            unit: string;
            trend: "down" | "up" | "stable";
        }[];
        integrations: string[];
    }[], ManufacturingDepartment[] | {
        id: string;
        name: string;
        description: string;
        supervisor: string;
        shift: "day" | "evening" | "night" | "all-shifts";
        capabilities: string[];
        qualityStandards: string[];
        machines: string[];
        operators: string[];
        activeJobs: number;
        efficiency: number;
        utilizationRate: number;
        kpis: {
            name: string;
            value: number;
            target: number;
            unit: string;
            trend: "down" | "up" | "stable";
        }[];
        integrations: string[];
    }[]>;
    machines: import("vue").Ref<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[], Machine[] | {
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    workCenters: import("vue").Ref<{
        id: string;
        name: string;
        department: string;
        machines: string[];
        capabilities: string[];
        capacity: number;
        currentLoad: number;
        efficiency: number;
        setupTime: number;
        cycleTime: number;
        location: string;
        supervisor: string;
    }[], WorkCenter[] | {
        id: string;
        name: string;
        department: string;
        machines: string[];
        capabilities: string[];
        capacity: number;
        currentLoad: number;
        efficiency: number;
        setupTime: number;
        cycleTime: number;
        location: string;
        supervisor: string;
    }[]>;
    processes: import("vue").Ref<{
        id: string;
        name: string;
        department: string;
        description: string;
        steps: {
            id: string;
            stepNumber: number;
            name: string;
            description: string;
            duration: number;
            resources: string[];
            qualityChecks: string[];
            safetyNotes: string[];
        }[];
        standardTime: number;
        qualityChecks: string[];
        tooling: string[];
        materials: string[];
        skillRequirements: string[];
        safetyRequirements: string[];
    }[], Process[] | {
        id: string;
        name: string;
        department: string;
        description: string;
        steps: {
            id: string;
            stepNumber: number;
            name: string;
            description: string;
            duration: number;
            resources: string[];
            qualityChecks: string[];
            safetyNotes: string[];
        }[];
        standardTime: number;
        qualityChecks: string[];
        tooling: string[];
        materials: string[];
        skillRequirements: string[];
        safetyRequirements: string[];
    }[]>;
    capabilities: import("vue").Ref<{
        id: string;
        name: string;
        description: string;
        departments: string[];
        tolerance: string;
        materials: string[];
        maxSize?: string | undefined;
        minFeature?: string | undefined;
        surfaceFinish?: string | undefined;
        processes?: string[] | undefined;
        certifications?: string[] | undefined;
        qualityStandards?: string[] | undefined;
        equipment?: string[] | undefined;
        services?: string[] | undefined;
        layerHeight?: string | undefined;
        postProcessing?: string[] | undefined;
        leadTime?: string | undefined;
        capacity?: string | undefined;
    }[], Capability[] | {
        id: string;
        name: string;
        description: string;
        departments: string[];
        tolerance: string;
        materials: string[];
        maxSize?: string | undefined;
        minFeature?: string | undefined;
        surfaceFinish?: string | undefined;
        processes?: string[] | undefined;
        certifications?: string[] | undefined;
        qualityStandards?: string[] | undefined;
        equipment?: string[] | undefined;
        services?: string[] | undefined;
        layerHeight?: string | undefined;
        postProcessing?: string[] | undefined;
        leadTime?: string | undefined;
        capacity?: string | undefined;
    }[]>;
    digitalTwinCompliance: import("vue").Ref<{
        id: string;
        partNumber: string;
        digitalTwinVersion: string;
        physicalPartVersion: string;
        complianceStatus: "compliant" | "non-compliant" | "under-review";
        lastValidation: string;
        deviations: {
            id: string;
            type: "material" | "dimensional" | "process" | "documentation";
            description: string;
            severity: "critical" | "minor" | "major";
            status: "open" | "approved" | "rejected";
            justification?: string | undefined;
        }[];
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[], DigitalTwinCompliance[] | {
        id: string;
        partNumber: string;
        digitalTwinVersion: string;
        physicalPartVersion: string;
        complianceStatus: "compliant" | "non-compliant" | "under-review";
        lastValidation: string;
        deviations: {
            id: string;
            type: "material" | "dimensional" | "process" | "documentation";
            description: string;
            severity: "critical" | "minor" | "major";
            status: "open" | "approved" | "rejected";
            justification?: string | undefined;
        }[];
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[]>;
    toolDataIntegrity: import("vue").Ref<{
        id: string;
        toolId: string;
        toolNumber: string;
        description: string;
        digitalData: {
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            geometry: string;
            speeds: number[];
            feeds: number[];
            applications: string[];
        };
        physicalVerification: {
            measuredDiameter: number;
            measuredLength: number;
            condition: "good" | "worn" | "damaged" | "new";
            wearMeasurements: {
                location: string;
                measurement: number;
                tolerance: number;
                status: "within-spec" | "approaching-limit" | "out-of-spec";
            }[];
            lastInspection: string;
            inspector: string;
        };
        complianceStatus: "pending" | "verified" | "discrepancy";
        lastVerification: string;
        verifiedBy: string;
        discrepancies: string[];
    }[], ToolDataIntegrity[] | {
        id: string;
        toolId: string;
        toolNumber: string;
        description: string;
        digitalData: {
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            geometry: string;
            speeds: number[];
            feeds: number[];
            applications: string[];
        };
        physicalVerification: {
            measuredDiameter: number;
            measuredLength: number;
            condition: "good" | "worn" | "damaged" | "new";
            wearMeasurements: {
                location: string;
                measurement: number;
                tolerance: number;
                status: "within-spec" | "approaching-limit" | "out-of-spec";
            }[];
            lastInspection: string;
            inspector: string;
        };
        complianceStatus: "pending" | "verified" | "discrepancy";
        lastVerification: string;
        verifiedBy: string;
        discrepancies: string[];
    }[]>;
    materialInventory: import("vue").Ref<{
        id: string;
        materialCode: string;
        description: string;
        specification: string;
        currentStock: number;
        unit: string;
        location: string;
        bin: string;
        reorderPoint: number;
        maxStock: number;
        cost: number;
        supplier: string;
        lastReceived: string;
        expirationDate?: string | undefined;
        certifications: string[];
        heatNumber?: string | undefined;
        lotNumber?: string | undefined;
    }[], MaterialInventory[] | {
        id: string;
        materialCode: string;
        description: string;
        specification: string;
        currentStock: number;
        unit: string;
        location: string;
        bin: string;
        reorderPoint: number;
        maxStock: number;
        cost: number;
        supplier: string;
        lastReceived: string;
        expirationDate?: string | undefined;
        certifications: string[];
        heatNumber?: string | undefined;
        lotNumber?: string | undefined;
    }[]>;
    purchaseOrders: import("vue").Ref<{
        id: string;
        poNumber: string;
        supplier: string;
        status: "draft" | "sent" | "acknowledged" | "partial" | "complete" | "cancelled";
        orderDate: string;
        requestedDate: string;
        promisedDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            unitPrice: number;
            totalPrice: number;
            requestedDate: string;
            promisedDate?: string | undefined;
            receivedQuantity: number;
            status: "pending" | "partial" | "complete" | "cancelled";
        }[];
        totalValue: number;
        buyer: string;
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[], PurchaseOrder[] | {
        id: string;
        poNumber: string;
        supplier: string;
        status: "draft" | "sent" | "acknowledged" | "partial" | "complete" | "cancelled";
        orderDate: string;
        requestedDate: string;
        promisedDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            unitPrice: number;
            totalPrice: number;
            requestedDate: string;
            promisedDate?: string | undefined;
            receivedQuantity: number;
            status: "pending" | "partial" | "complete" | "cancelled";
        }[];
        totalValue: number;
        buyer: string;
        approvedBy?: string | undefined;
        notes?: string | undefined;
    }[]>;
    shippingReceiving: import("vue").Ref<{
        id: string;
        type: "shipping" | "receiving";
        documentNumber: string;
        supplier?: string | undefined;
        customer?: string | undefined;
        status: "complete" | "scheduled" | "in-progress" | "exception";
        scheduledDate: string;
        actualDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            condition: "good" | "damaged" | "discrepancy";
            location?: string | undefined;
            serialNumbers?: string[] | undefined;
            notes?: string | undefined;
        }[];
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        dock: string;
        handler: string;
        notes?: string | undefined;
    }[], ShippingReceiving[] | {
        id: string;
        type: "shipping" | "receiving";
        documentNumber: string;
        supplier?: string | undefined;
        customer?: string | undefined;
        status: "complete" | "scheduled" | "in-progress" | "exception";
        scheduledDate: string;
        actualDate?: string | undefined;
        items: {
            id: string;
            partNumber: string;
            description: string;
            quantity: number;
            unit: string;
            condition: "good" | "damaged" | "discrepancy";
            location?: string | undefined;
            serialNumbers?: string[] | undefined;
            notes?: string | undefined;
        }[];
        carrier?: string | undefined;
        trackingNumber?: string | undefined;
        dock: string;
        handler: string;
        notes?: string | undefined;
    }[]>;
    programmingTasks: import("vue").Ref<{
        id: string;
        jobId: string;
        partNumber: string;
        operation: string;
        machine: string;
        programmer: string;
        status: "approved" | "in-progress" | "assigned" | "review" | "released";
        priority: "low" | "medium" | "high" | "urgent";
        estimatedHours: number;
        actualHours: number;
        dueDate: string;
        programs: {
            id: string;
            fileName: string;
            version: string;
            filePath: string;
            fileSize: number;
            lastModified: string;
            modifiedBy: string;
            status: "archived" | "approved" | "draft" | "review" | "released";
            checksum: string;
        }[];
        toolList: {
            toolNumber: number;
            description: string;
            type: string;
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            vendor: string;
            partNumber: string;
            quantity: number;
            critical: boolean;
            alternatives?: string[] | undefined;
        }[];
        fixtures: {
            id: string;
            name: string;
            type: "custom" | "hydraulic" | "vise" | "modular" | "pneumatic";
            description: string;
            location: string;
            available: boolean;
            setupTime: number;
            notes?: string | undefined;
        }[];
        notes?: string | undefined;
    }[], ProgrammingTask[] | {
        id: string;
        jobId: string;
        partNumber: string;
        operation: string;
        machine: string;
        programmer: string;
        status: "approved" | "in-progress" | "assigned" | "review" | "released";
        priority: "low" | "medium" | "high" | "urgent";
        estimatedHours: number;
        actualHours: number;
        dueDate: string;
        programs: {
            id: string;
            fileName: string;
            version: string;
            filePath: string;
            fileSize: number;
            lastModified: string;
            modifiedBy: string;
            status: "archived" | "approved" | "draft" | "review" | "released";
            checksum: string;
        }[];
        toolList: {
            toolNumber: number;
            description: string;
            type: string;
            diameter: number;
            length: number;
            material: string;
            coating?: string | undefined;
            vendor: string;
            partNumber: string;
            quantity: number;
            critical: boolean;
            alternatives?: string[] | undefined;
        }[];
        fixtures: {
            id: string;
            name: string;
            type: "custom" | "hydraulic" | "vise" | "modular" | "pneumatic";
            description: string;
            location: string;
            available: boolean;
            setupTime: number;
            notes?: string | undefined;
        }[];
        notes?: string | undefined;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    departmentsByType: import("vue").ComputedRef<{
        production: {
            id: string;
            name: string;
            description: string;
            supervisor: string;
            shift: "day" | "evening" | "night" | "all-shifts";
            capabilities: string[];
            qualityStandards: string[];
            machines: string[];
            operators: string[];
            activeJobs: number;
            efficiency: number;
            utilizationRate: number;
            kpis: {
                name: string;
                value: number;
                target: number;
                unit: string;
                trend: "down" | "up" | "stable";
            }[];
            integrations: string[];
        }[];
        support: {
            id: string;
            name: string;
            description: string;
            supervisor: string;
            shift: "day" | "evening" | "night" | "all-shifts";
            capabilities: string[];
            qualityStandards: string[];
            machines: string[];
            operators: string[];
            activeJobs: number;
            efficiency: number;
            utilizationRate: number;
            kpis: {
                name: string;
                value: number;
                target: number;
                unit: string;
                trend: "down" | "up" | "stable";
            }[];
            integrations: string[];
        }[];
    }>;
    machinesByDepartment: import("vue").ComputedRef<Record<string, Machine[]>>;
    activeMachines: import("vue").ComputedRef<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    availableMachines: import("vue").ComputedRef<{
        id: string;
        name: string;
        type: string;
        department: string;
        status: "running" | "maintenance" | "idle" | "down";
        capabilities: string[];
        specifications: Record<string, string>;
        currentJob?: string | undefined;
        operator?: string | undefined;
        condition: import("../types/manufacturing").MachineCondition;
        lastMaintenance: string;
        nextMaintenance: string;
        utilizationRate: number;
        efficiency: number;
        location?: string | undefined;
        serialNumber?: string | undefined;
        manufacturer?: string | undefined;
        model?: string | undefined;
        yearInstalled?: number | undefined;
    }[]>;
    overallEfficiency: import("vue").ComputedRef<number>;
    overallUtilization: import("vue").ComputedRef<number>;
    fetchDepartments: () => Promise<void>;
    fetchMachines: () => Promise<void>;
    fetchWorkCenters: () => Promise<void>;
    fetchProcesses: () => Promise<void>;
    fetchCapabilities: () => Promise<void>;
}, "fetchDepartments" | "fetchMachines" | "fetchWorkCenters" | "fetchProcesses" | "fetchCapabilities">>;
